 2팀 최현철,강재구,박태현,조준형

1. dynamic_cast <new_type> (expression) -
dynamic_cast 란 안전한 다운캐스팅에 사용되며 부모 클래스의 포인터에서 자식 클래스의 포인터로 다운 캐스팅 해주는 연산자입니다.
여기에서 부모의 클래스의 포인터가 무엇을 가리키고 있는지가 중요합니다.
그리고 실제로 해당 타입이 다운 캐스팅이 가능한지 검사를 하기 때문에 런타임 비용이 조금 높은 캐스트 연산자입니다. 

2. reinterpret_cast<new_type>(expression) - 
reinterpret_cast이란 임의의 포인터 타입끼리 변환을 허용하며 정수형을 포인터로 바꿀 수 있는 캐스트 연산자입니다.
여기에서 expression에 해당하는 것을 new_type으로 비트단위로 바꾸는 것을 의미합니다. 
주의해야 할 것은 다른 형태의 포인터로 변경이 가능해서 결과 값이 잘 못 사용하는 경우에 쓰레기 값이 나올 수 있습니다.

3. static_cast<new_type>(expression) -
static_cast<new_type>(expression)은 논리적으로 변환 가능한 타입을 변환하고 컴파일 할 때 형변환에 대한 타입 오류를 잡아주며 
실수와 정수, 열거형과 정수형, 실수와 실수 사이의 변환 등을 허용합니다. 배열에서 포인트로 변경 가능하고 
함수에서 함수 포인터로 변경이 가능하고 포인터 타입을 다른것으로 변환할 수 없고  상속 관계에 있는 포인터끼리 변환이 가능합니다.

4. const_cast<new_type>(expression) - 
const_cast는 포인터나 참조형의 상수성을 잠시 제거할 때 사용하며 다른 캐스트처럼 형 변환은 불가능하고 오로지 상수성을 제거하는 것만 사용가능합니다. 


*<new_type> = <바꾸려는 새로운 타입> , (expression) = (대상)을 뜻한다.
*다운 캐스팅: 업 캐스팅된 자료형을 다시 자식 클래스의 자료형으로 바꿔주는 작업

1) typeid()  
typeid는 자료형이나 변수 또는 객체를 받아 const type_info& 형식으로 입력받은 값의 타입을 return해주는 함수이다. 
그리고 값을 받을 때 포인터 타입을 구분한다(포인터 변수일 경우 값 앞에 *를 붙이면 포인터가 가르키는 객체의 타입을 return 하고 
그냥 쓰면 포인터로 선언한 타입을 return 한다) 이는 사용하기에 따라 개발자가 디버깅을 할때 형 변환 체크에 도움이 되며
type에 따라 실행되는 결과가 다른 조건문을 만들 수 도 있다. type_info 에는 ==, !=같은 비교 연산자와 before(), name(), raw_name, hash_code()등의
함수가 존재하는데 각각 기본 자료형의 정렬된 순서에 따라 높으면 1 낮으면 0을 반환
return 값을 char로 형변환 압축된 형식의 문자열 반환 타입의 hash code 반환 을 한다. 사용법은 typeid(). 뒤에붙이면된다. 
예를들어 typeid(/*type*/).name()  typeid(/*type*/).before(/*type*/) before 같은 경우는 구조체나 class 에서는 제대로 작동하지 않지만
부모 자식 class를 집어넣는 경우에는 부모 클래스가 항상 상위에 존재한다.
 

2) sizeof()
연산자sizeof는 자료형이나 변수 또는 객체를 받아 그 크기를 byte단위로 return해 주는 함수이다. 
하지만 이는 컴파일러가 지원하는 비트수에 따라 크기가 달라진다. 배열의 경우에는 배열의 총 크기를 return하므로 
만일 배열의 요소 개수를 확인하고 싶을때는 sizeof(배열) / sizeof(배열[0]) 이라는 식을 사용한다.

3) typedef 키워드 
typedef를 사용하면 프로그래머가 타입의 별칭을 생성하고, 실제 타입 이름 대신 별칭을 사용할 수 있다. 즉, C++에서 이미 정의된 자료형이나 
사용자 정의 자료형보다 더 짧거나 의미 있는 이름을 지어줄 수 있다. typedef를 선언하려면 typedef 키워드를 사용하고 
자료형 다음에 별칭 이름을 사용하면 된다. 예를 들어 distance_t를 double 자료형의 별칭으로 정의한다면 typedef double distance_t이다.
또한 다음과 같이 변수를 선언할 경우 double howFar0; = distance_t howFar1; 기능은 똑같다.
